package main

import (
	"fmt"
	"log"
	"net/http"
	"os"

	_ "github.com/avito-test/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/avito-test/internal/config/middleware"
	"github.com/avito-test/internal/server"
	"github.com/gorilla/mux"

	swagger "github.com/swaggo/http-swagger"
)

// @title Balance Service
// @version 2.0

// @host localhost:8000
func main() {
	router := mux.NewRouter()
	router.Use(middleware.ResponseHeaders)

	httpServer := server.NewHttpServer()

	router.Handle("/balance/{userId}", middleware.RequestID(middleware.Logging(http.HandlerFunc(httpServer.HandleGetBalance)))).Methods(http.MethodGet)
	router.Handle("/balance", middleware.RequestID(middleware.Logging(http.HandlerFunc(httpServer.HandleIncreaseBalance)))).Methods(http.MethodPost)

	router.Handle("/transaction", middleware.RequestID(middleware.Logging(http.HandlerFunc(httpServer.HandleGetTransactions)))).Methods(http.MethodGet)
	router.Handle("/transaction", middleware.RequestID(middleware.Logging(http.HandlerFunc(httpServer.HandleTransaction)))).Methods(http.MethodPost)

	router.Handle("/report", middleware.RequestID(middleware.Logging(http.HandlerFunc(httpServer.HandleCreateReport)))).Methods(http.MethodPost)
	router.PathPrefix("/report/").Handler(middleware.RequestID(middleware.Logging(http.StripPrefix("/report/", http.FileServer(http.Dir(fmt.Sprintf("static%sfile", string(os.PathSeparator))))))))

	router.PathPrefix("/swagger").Handler(swagger.WrapHandler).Methods(http.MethodGet)

	if err := http.ListenAndServe(":8000", router); err != nil {
		log.Fatal(err.Error())
	}
}
